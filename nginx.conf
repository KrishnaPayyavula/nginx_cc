# Main configuration block for NGINX
worker_processes 1;  # Specifies the number of worker processes to handle requests. Usually set based on CPU cores.

events {
    worker_connections 1024;  # Maximum number of simultaneous connections a worker process can handle.
}

http {
    include mime.types;  # Includes file mappings for MIME types (e.g., .html -> text/html, .css -> text/css).

    # Upstream block: Load balancing configuration for a Node.js backend cluster
    upstream nodejs_cluster {
        server 127.0.0.1:3001;  # Defines the first Node.js server in the cluster.
        server 127.0.0.1:3002;  # Defines the second Node.js server in the cluster.
        server 127.0.0.1:3003;  # Defines the third Node.js server in the cluster.
    }

    # HTTPS server block
    server {
        listen 443 ssl;  # Configures the server to listen on port 443 for HTTPS traffic.
        server_name localhost;  # The server's hostname or IP address. Use localhost for local testing.

        # SSL/TLS certificate configuration for encrypted communication
        ssl_certificate /Users/nana/nginx-certs/nginx-selfsigned.crt;  # Path to the SSL certificate file.
        ssl_certificate_key /Users/nana/nginx-certs/nginx-selfsigned.key;  # Path to the SSL certificate private key.

        # Location block to handle all incoming requests and forward them to the Node.js backend
        location / {
            proxy_pass http://nodejs_cluster;  # Proxies all requests to the upstream Node.js cluster.
            proxy_set_header Host $host;  # Passes the original host header to the backend.
            proxy_set_header X-Real-IP $remote_addr;  # Passes the real client IP to the backend for logging.
        }
    }

    # HTTP server block (optional) for redirecting HTTP traffic to HTTPS
    server {
        listen 8080;  # Configures the server to listen on port 80 for HTTP traffic.
        server_name localhost;  # Hostname or IP address for the HTTP server.

        # Redirects all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;  # Sends a 301 permanent redirect to the HTTPS version of the URL.
        }
    }
}
